// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';

contract PatientIdentity {
    using EnumerableSet for EnumerableSet.AddressSet;
    EnumerableSet.AddressSet allUserTypeAddress;
    struct commonData {
        string userType;
        address userAddress;
        uint256 userID;
        string username;
        string emailAddress;
    }

    struct Patient {
        address patientAddress;
        uint256 patientID;
        string name;
        string gender;
        uint256 age;
        string location;
        bool isAdded;
        string userType;
        string[] imgUrl;
        PatientPersonalData patientPersonalData;
        string profilePic;
        string birthday;
        string emailAddress;
    }
    EnumerableSet.AddressSet personalDoctor;

    function getPersonalDoctor() public view returns (address[] memory) {
        return personalDoctor.values();
    }

    EnumerableSet.AddressSet sharedAllUsersAddress;

    function getsharedAllUsersAddress() public view returns (address[] memory) {
        return sharedAllUsersAddress.values();
    }

    struct PatientPersonalData {
        string height;
        string Blood;
        string PreviousDiseases;
        string Medicinedrugs;
        string BadHabits;
        string ChronicDiseases;
        string HealthAllergies;
        string BirthDefects;
    }

    struct SentData {
        string[] imagesUrl;
    }
    struct Doctor {
        address DoctorAddress;
        uint256 doctorID;
        string name;
        string specialty;
        uint256 consultationFee;
        uint256 BMDCNumber;
        uint256 yearOfExperience;
        EnumerableSet.AddressSet PatientToDoctor; //data share of all patient
        string[] patientTest;
        // data share of all patient
        bool isAdded;
        EnumerableSet.AddressSet TreatedPatient;
        string userType;
        string profilePic;
        string birthday;
        mapping(address => SentData) userData;
        EnumerableSet.AddressSet pathologist;
        string emailAddress;
    }

    struct Pathologist {
        address pathologistAddress;
        uint256 pathologistID;
        string name;
        uint256 licenseNumber;
        string specializationArea;
        uint256 totalExperience;
        bool isAdded;
        EnumerableSet.AddressSet PatientToPathologiest; //allPatientsAddressSharedTopathologist
        string[] pathologistTest;
        string userType;
        string profilePic;
        string birthday;
        mapping(address => SentData) userData;
        EnumerableSet.AddressSet doctor;
        string emailAddress;
    }

    struct MedicalResearchLab {
        address labAddress;
        uint256 labID;
        string name;
        uint256 licenseID;
        string researchArea;
        uint256 labRating;
        bool isAdded;
        // allPatientsAddressSharedToMedicalResearchLab
        string[] imgUrl; // MedicalResearchLabReports
        string userType;
        string profilePic;
        string emailAddress;
    }
    EnumerableSet.AddressSet PatientToMedRcLab;

    function getPatientToMedRcLab() public view returns (address[] memory) {
        return PatientToMedRcLab.values();
    }

    struct PharmacyCompany {
        address pharmacyCompanyAddress;
        uint256 companyID;
        string name;
        uint256 licenseID;
        string productInformation;
        uint256 pharmacyRating;
        bool isAdded;
        // allPatientAddressSharedToPharmacyCompany
        string userType;
        string[] TopMedichine;
        string profilePic;
        string emailAddress;
    }
    EnumerableSet.AddressSet PatientToPharmacy;

    function getPatientToPharmacy() public view returns (address[] memory) {
        return PatientToPharmacy.values();
    }

    mapping(address => uint256) public accounts;
    mapping(address => Patient) patients;
    mapping(address => Doctor) doctors;

    mapping(address => Pathologist) pathologists; //pathologistTests
    mapping(address => MedicalResearchLab) medicalResearchLabs;
    mapping(address => PharmacyCompany) pharmacyCompanies;

    // Problem 1

    // Setters and Getters for Patient struct
    function setPatient(
        uint256 patientID,
        string memory name,
        string memory gender,
        uint256 age,
        string memory location,
        string memory birthday,
        string memory emailAddress
    ) public {
        address user = msg.sender;
        require(
            patients[user].isAdded == false,
            'You have already created your profile'
        );

        Patient storage patient = patients[user];

        patient.patientAddress = user;
        patient.patientID = patientID;
        patient.name = name;
        patient.gender = gender;
        patient.age = age;
        accounts[user] = 5;
        patient.location = location;
        patient.isAdded = true;
        patient.userType = 'Patient';
        patient.birthday = birthday;
        patient.emailAddress = emailAddress;
        allUserTypeAddress.add(user);
    }

    enum EntityType {
        Unknown,
        Doctor,
        Pathologist,
        MedicalResearchLab,
        PharmacyCompany,
        Patient
    }

    function addPrescription(address _user, string[] memory url) external {
        if (accounts[msg.sender] == uint256(EntityType.Doctor)) {
            require(doctors[msg.sender].isAdded, "Doctor doesn't exist");

            if (accounts[_user] == uint256(EntityType.Pathologist)) {
                for (uint256 i = 0; i < url.length; i++) {
                    doctors[msg.sender].userData[_user].imagesUrl.push(url[i]);
                }

                bool doctorAlreadysent = false;

                if (doctors[msg.sender].pathologist.contains(_user)) {
                    doctorAlreadysent = true;
                }

                if (!doctorAlreadysent) {
                    doctors[msg.sender].pathologist.add(_user);
                    pathologists[_user].doctor.add(msg.sender);
                }
            } else if (accounts[_user] == uint256(EntityType.Patient)) {
                for (uint256 i = 0; i < url.length; i++) {
                    // patients[_user].imgUrl.push(url[i]);
                    doctors[msg.sender].userData[_user].imagesUrl.push(url[i]);
                }
                Doctor storage doctor = doctors[msg.sender];
                bool patientAlreadyTreated = false;

                if (doctor.TreatedPatient.contains(_user)) {
                    patientAlreadyTreated = true;
                }

                if (!patientAlreadyTreated) {
                    doctors[msg.sender].TreatedPatient.add(_user);
                    personalDoctor.add(msg.sender);
                }
            } else {
                revert("You can't add prescription for this entity");
            }
        } else if (accounts[msg.sender] == uint256(EntityType.Patient)) {
            require(patients[msg.sender].isAdded, "Patient doesn't exist");
            for (uint256 i = 0; i < url.length; i++) {
                patients[msg.sender].imgUrl.push(url[i]);
            }
        } else if (accounts[msg.sender] == uint256(EntityType.Pathologist)) {
            require(
                pathologists[msg.sender].isAdded,
                "Pathologist doesn't exist"
            );
            if (accounts[_user] == uint256(EntityType.Doctor)) {
                for (uint256 i = 0; i < url.length; i++) {
                    pathologists[msg.sender].userData[_user].imagesUrl.push(
                        url[i]
                    );
                }
                bool pathologistAlreadysent = false;

                if (pathologists[msg.sender].doctor.contains(_user)) {
                    pathologistAlreadysent = true;
                }

                if (!pathologistAlreadysent) {
                    doctors[_user].pathologist.add(msg.sender);
                    pathologists[msg.sender].doctor.add(_user);
                }
            } else {
                revert("You can't add prescription for this entity");
            }
        } else if (accounts[_user] == uint256(EntityType.MedicalResearchLab)) {
            for (uint256 i = 0; i < url.length; i++) {
                medicalResearchLabs[_user].imgUrl.push(url[i]);
            }
        } else {
            revert("You can't add prescription for this entity");
        }
    }

    function addProfilePic(string memory url) external {
        if (accounts[msg.sender] == uint256(EntityType.Doctor)) {
            doctors[msg.sender].profilePic = url;
        } else if (accounts[msg.sender] == uint256(EntityType.Pathologist)) {
            pathologists[msg.sender].profilePic = url;
        } else if (accounts[msg.sender] == uint256(EntityType.Patient)) {
            patients[msg.sender].profilePic = url;
        } else if (
            accounts[msg.sender] == uint256(EntityType.PharmacyCompany)
        ) {
            pharmacyCompanies[msg.sender].profilePic = url;
        } else if (
            accounts[msg.sender] == uint256(EntityType.MedicalResearchLab)
        ) {
            medicalResearchLabs[msg.sender].profilePic = url;
        } else {
            revert("You don't add profile pic in this  entity ");
        }
    }

    function getDoctor(
        address _doctorAddress
    )
        public
        view
        returns (
            address doctorAddress,
            uint256 doctorID,
            string memory name,
            string memory specialty,
            uint256 consultationFee,
            uint256 BMDCNumber,
            uint256 yearOfExperience,
            string memory userType,
            string memory profilePic,
            string memory birthday,
            string memory emailAddress
        )
    {
        Doctor storage doctor = doctors[_doctorAddress];
        require(doctor.isAdded, 'Doctor not found');

        return (
            doctor.DoctorAddress,
            doctor.doctorID,
            doctor.name,
            doctor.specialty,
            doctor.consultationFee,
            doctor.BMDCNumber,
            doctor.yearOfExperience,
            doctor.userType,
            doctor.profilePic,
            doctor.birthday,
            doctor.emailAddress
        );
    }

    function getDoctorAnotherData(
        address _doctorAddress
    )
        public
        view
        returns (
            address[] memory PatientToDoctor,
            string[] memory patientTest,
            address[] memory TreatedPatient,
            address[] memory pathologist
        )
    {
        Doctor storage doctor = doctors[_doctorAddress];
        require(doctor.isAdded, 'Doctor not found');

        return (
            doctor.PatientToDoctor.values(),
            doctor.patientTest,
            doctor.TreatedPatient.values(),
            doctor.pathologist.values()
        );
    }

    function getPathologistDataFromDoctor(
        address _doctorAddress,
        address pathoAddress
    ) external view returns (string[] memory) {
        return doctors[_doctorAddress].userData[pathoAddress].imagesUrl;
    }

    function getDoctorDataFromPathologist(
        address _pathoAddress,
        address _doctorAddress
    ) external view returns (string[] memory) {
        return pathologists[_pathoAddress].userData[_doctorAddress].imagesUrl;
    }

    function getPatientDataFromDoctor(
        address _doctorAddress,
        address _patientAddress
    ) external view returns (string[] memory) {
        return doctors[_doctorAddress].userData[_patientAddress].imagesUrl;
    }

    function getPatient(
        address _patientAddress
    ) public view returns (Patient memory) {
        assert(patients[_patientAddress].isAdded);
        return patients[_patientAddress];
    }

    // Setters and Getters for Doctor struct
    function setDoctor(
        uint256 doctorID,
        string memory name,
        string memory specialty,
        uint256 consultationFee,
        uint256 BMDCNumber,
        uint256 yearOfExperience,
        string memory birthday
    ) public {
        address user = msg.sender;
        require(
            doctors[user].isAdded == false,
            'You already create your profile'
        );

        Doctor storage doctor = doctors[user];

        doctor.DoctorAddress = user;
        doctor.doctorID = doctorID;
        doctor.name = name;
        doctor.specialty = specialty;
        doctor.consultationFee = consultationFee;
        doctor.BMDCNumber = BMDCNumber;
        doctor.yearOfExperience = yearOfExperience;
        doctor.userType = 'Doctor';
        doctor.isAdded = true;
        accounts[user] = 1;
        doctor.birthday = birthday;
        allUserTypeAddress.add(user);
        doctor.emailAddress;
    }

    function setPathologist(
        uint256 pathologistID,
        string memory name,
        uint256 licenseNumber,
        string memory specializationArea,
        uint256 totalExperience,
        string memory birthday,
        string memory emailAddress
    ) public {
        address user = msg.sender;
        require(
            pathologists[user].isAdded == false,
            'You already create your profile'
        );

        Pathologist storage pathologist = pathologists[user];
        pathologist.pathologistAddress = user;
        pathologist.pathologistID = pathologistID;
        pathologist.name = name;
        pathologist.licenseNumber = licenseNumber;
        pathologist.specializationArea = specializationArea;
        pathologist.totalExperience = totalExperience;
        accounts[user] = 2;
        pathologist.isAdded = true;
        pathologist.userType = 'Pathologist';
        pathologist.birthday = birthday;
        allUserTypeAddress.add(user);

        pathologist.emailAddress = emailAddress;
    }

    // Setters and Getters for MedicalResearchLab struct
    function setMedicalResearchLab(
        uint256 labID,
        string memory name,
        uint256 licenseID,
        string memory researchArea,
        uint256 labRating
    ) public {
        address user = msg.sender;
        require(
            medicalResearchLabs[user].isAdded == false,
            'You already create your profile'
        );

        MedicalResearchLab storage lab = medicalResearchLabs[user];

        lab.labAddress = user;
        lab.labID = labID;
        lab.name = name;
        lab.licenseID = licenseID;
        lab.researchArea = researchArea;
        lab.labRating = labRating;
        lab.isAdded = true;
        accounts[user] = 3;
        lab.userType = 'Medical Research Lab';
        allUserTypeAddress.add(user);
    }

    // Setters and Getters for PharmacyCompany struct
    function setPharmacyCompany(
        uint256 companyID,
        string memory name,
        uint256 licenseID,
        string memory productInformation,
        uint256 pharmacyRating
    ) public {
        address user = msg.sender;
        require(
            pharmacyCompanies[user].isAdded == false,
            'You already create your profile'
        );

        PharmacyCompany storage company = pharmacyCompanies[user];

        company.pharmacyCompanyAddress = user;
        company.companyID = companyID;
        company.name = name;
        company.licenseID = licenseID;
        company.productInformation = productInformation;
        company.pharmacyRating = pharmacyRating;
        company.isAdded = true;
        accounts[user] = 4;
        company.userType = 'Pharmacy Company';
        allUserTypeAddress.add(user);
        company.emailAddress;
    }

    function transferDataByPatient(address useraddress) public {
        uint256 user0 = accounts[useraddress];

        require(
            accounts[msg.sender] == uint256(EntityType.Patient),
            'Only patients can transfer data'
        );

        require(patients[msg.sender].isAdded, "Patient doesn't exist");

        if (
            user0 == uint256(EntityType.Doctor) &&
            accounts[useraddress] == uint256(EntityType.Doctor)
        ) {
            require(doctors[useraddress].isAdded, "Doctor doesn't exist");
            Doctor storage doctor = doctors[useraddress];
            bool alreadyShared = false;

            if (doctor.PatientToDoctor.contains(msg.sender)) {
                alreadyShared = true;
            }

            if (alreadyShared) {
                revert('Data already shared with this doctor');
            } else {
                doctor.PatientToDoctor.add(msg.sender);
                sharedAllUsersAddress.add(useraddress);
            }
        } else if (
            user0 == uint256(EntityType.MedicalResearchLab) &&
            accounts[useraddress] == uint256(EntityType.MedicalResearchLab)
        ) {
            require(
                medicalResearchLabs[useraddress].isAdded,
                "Medical Research Lab doesn't exist"
            );

            bool alreadyShared = false;

            if (PatientToMedRcLab.contains(msg.sender)) {
                alreadyShared = true;
            }

            if (alreadyShared) {
                revert('Data already shared with this medical research lab');
            } else {
                PatientToMedRcLab.add(msg.sender);
                sharedAllUsersAddress.add(useraddress);
            }
        } else if (
            user0 == uint256(EntityType.PharmacyCompany) &&
            accounts[useraddress] == uint256(EntityType.PharmacyCompany)
        ) {
            require(
                pharmacyCompanies[useraddress].isAdded,
                "Pharmacy Company doesn't exist"
            );

            bool alreadyShared = false;

            if (PatientToPharmacy.contains(msg.sender)) {
                alreadyShared = true;
            }

            if (alreadyShared) {
                revert('Data already shared with this pharmacy company');
            } else {
                PatientToPharmacy.add(msg.sender);
                sharedAllUsersAddress.add(useraddress);
            }
        } else {
            revert('Invalid entity or transfer not allowed');
        }
    }

    function showSharedPrescription(
        address patientAddress
    ) public view returns (string[] memory imageUrl) {
        return patients[patientAddress].imgUrl;
    }

    function ConnectedAccountType(
        address useraddress
    ) public view returns (uint256) {
        uint256 user0 = accounts[useraddress];
        if (user0 == uint256(EntityType.Unknown)) {
            return user0;
        } else if (user0 == uint256(EntityType.Doctor)) {
            return user0;
        } else if (user0 == uint256(EntityType.Patient)) {
            return user0;
        } else if (user0 == uint256(EntityType.Pathologist)) {
            return user0;
        } else if (user0 == uint256(EntityType.MedicalResearchLab)) {
            return user0;
        } else if (user0 == uint256(EntityType.PharmacyCompany)) {
            return user0;
        } else {
            revert('Invaild Stakeholder');
        }
    }

    function getAlluserTypeData(
        address userAddress
    ) public view returns (commonData memory userData) {
        uint256 user0 = accounts[userAddress];
        if (user0 == uint256(EntityType.Doctor)) {
            Doctor storage doctor = doctors[userAddress];
            userData = commonData({
                userType: doctor.userType,
                userAddress: doctor.DoctorAddress,
                userID: doctor.doctorID,
                username: doctor.name,
                emailAddress: doctor.emailAddress
            });
        } else if (user0 == uint256(EntityType.MedicalResearchLab)) {
            MedicalResearchLab storage lab = medicalResearchLabs[userAddress];

            userData = commonData({
                userType: lab.userType,
                userAddress: lab.labAddress,
                userID: lab.labID,
                username: lab.name,
                emailAddress: lab.emailAddress
            });
        } else if (user0 == uint256(EntityType.PharmacyCompany)) {
            PharmacyCompany storage company = pharmacyCompanies[userAddress];
            userData = commonData({
                userType: company.userType,
                userAddress: company.pharmacyCompanyAddress,
                userID: company.companyID,
                username: company.name,
                emailAddress: company.emailAddress
            });
        }
        return userData;
    }

    function getPathologist(
        address _pathologistAddress
    )
        public
        view
        returns (
            address pathologistAddress,
            uint256 pathologistID,
            string memory name,
            uint256 licenseNumber,
            string memory specializationArea,
            uint256 totalExperience,
            address[] memory patientToPathologist,
            string[] memory pathologistTest,
            string memory userType,
            string memory profilePic,
            string memory birthday,
            address[] memory allDoctor
        )
    {
        Pathologist storage pathologist = pathologists[_pathologistAddress];
        require(pathologist.isAdded, 'Pathologist not found');

        return (
            pathologist.pathologistAddress,
            pathologist.pathologistID,
            pathologist.name,
            pathologist.licenseNumber,
            pathologist.specializationArea,
            pathologist.totalExperience,
            pathologist.PatientToPathologiest.values(),
            pathologist.pathologistTest,
            pathologist.userType,
            pathologist.profilePic,
            pathologist.birthday,
            pathologist.doctor.values()
        );
    }

    function getPharmacyCompany(
        address _pharmacyCompanyAddress
    ) public view returns (PharmacyCompany memory) {
        assert(pharmacyCompanies[_pharmacyCompanyAddress].isAdded);

        return pharmacyCompanies[_pharmacyCompanyAddress];
    }

    function getMedicalResearchLab(
        address _labAddress
    ) public view returns (MedicalResearchLab memory) {
        assert(medicalResearchLabs[_labAddress].isAdded);

        return medicalResearchLabs[_labAddress];
    }

    function setPatientPersonalData(
        string memory height,
        string memory blood,
        string memory previousDiseases,
        string memory medicineDrugs,
        string memory badHabits,
        string memory chronicDiseases,
        string memory healthAllergies,
        string memory birthDefects
    ) external {
        Patient storage patient = patients[msg.sender];
        patient.patientPersonalData.height = height;
        patient.patientPersonalData.Blood = blood;
        patient.patientPersonalData.PreviousDiseases = previousDiseases;
        patient.patientPersonalData.Medicinedrugs = medicineDrugs;
        patient.patientPersonalData.BadHabits = badHabits;
        patient.patientPersonalData.ChronicDiseases = chronicDiseases;
        patient.patientPersonalData.HealthAllergies = healthAllergies;
        patient.patientPersonalData.BirthDefects = birthDefects;
    }

    function addTopMedichine(string memory medichine) public {
        pharmacyCompanies[msg.sender].TopMedichine.push(medichine);
    }

    function deletePrecription(uint index, address _user) external {
        if (accounts[msg.sender] == uint256(EntityType.Patient)) {
            patients[msg.sender].imgUrl[index] = patients[msg.sender].imgUrl[
                patients[msg.sender].imgUrl.length - 1
            ];

            // Remove the last element
            patients[msg.sender].imgUrl.pop();
        } else if (accounts[msg.sender] == uint256(EntityType.Doctor)) {
            doctors[msg.sender].userData[_user].imagesUrl[index] = doctors[
                msg.sender
            ].userData[_user].imagesUrl[
                    doctors[msg.sender].userData[_user].imagesUrl.length - 1
                ];
            // Remove the last element
            doctors[msg.sender].userData[_user].imagesUrl.pop();
        } else if (accounts[msg.sender] == uint256(EntityType.Pathologist)) {
            pathologists[msg.sender].userData[_user].imagesUrl[index] = doctors[
                msg.sender
            ].userData[_user].imagesUrl[
                    doctors[msg.sender].userData[_user].imagesUrl.length - 1
                ];
            // Remove the last element
            pathologists[msg.sender].userData[_user].imagesUrl.pop();
        }
    }

    function revokeAccessData(address userAddress) external {
        if (accounts[msg.sender] == uint256(EntityType.Patient)) {
            sharedAllUsersAddress.remove(userAddress);
            if (accounts[userAddress] == uint256(EntityType.Doctor)) {
                doctors[userAddress].PatientToDoctor.remove(msg.sender);
            } else if (
                accounts[userAddress] == uint256(EntityType.MedicalResearchLab)
            ) {
                PatientToMedRcLab.remove(msg.sender);
            } else if (
                accounts[userAddress] == uint256(EntityType.PharmacyCompany)
            ) {
                PatientToPharmacy.remove(msg.sender);
            }
        }
    }

    function allUserData() public view returns (commonData[] memory) {
        commonData[] memory userDataArray = new commonData[](
            allUserTypeAddress.length()
        );

        for (uint i = 0; i < allUserTypeAddress.length(); i++) {
            address userAddress = allUserTypeAddress.at(i);
            uint256 userType = accounts[userAddress];

            if (userType == uint256(EntityType.Doctor)) {
                Doctor storage doctor = doctors[userAddress];
                userDataArray[i] = commonData({
                    userType: doctor.userType,
                    userAddress: doctor.DoctorAddress,
                    userID: doctor.doctorID,
                    username: doctor.name,
                    emailAddress: doctor.emailAddress
                });
            } else if (userType == uint256(EntityType.MedicalResearchLab)) {
                MedicalResearchLab storage lab = medicalResearchLabs[
                    userAddress
                ];
                userDataArray[i] = commonData({
                    userType: lab.userType,
                    userAddress: lab.labAddress,
                    userID: lab.labID,
                    username: lab.name,
                    emailAddress: lab.emailAddress
                });
            } else if (userType == uint256(EntityType.PharmacyCompany)) {
                PharmacyCompany storage company = pharmacyCompanies[
                    userAddress
                ];
                userDataArray[i] = commonData({
                    userType: company.userType,
                    userAddress: company.pharmacyCompanyAddress,
                    userID: company.companyID,
                    username: company.name,
                    emailAddress: company.emailAddress
                });
            } else if (userType == uint256(EntityType.Patient)) {
                Patient storage patient = patients[userAddress];
                userDataArray[i] = commonData({
                    userType: patient.userType,
                    userAddress: patient.patientAddress,
                    userID: patient.patientID,
                    username: patient.name,
                    emailAddress: patient.emailAddress
                });
            } else if (userType == uint256(EntityType.Pathologist)) {
                Pathologist storage pathologist = pathologists[userAddress];
                userDataArray[i] = commonData({
                    userType: pathologist.userType,
                    userAddress: pathologist.pathologistAddress,
                    userID: pathologist.pathologistID,
                    username: pathologist.name,
                    emailAddress: pathologist.emailAddress
                });
            }
        }

        return userDataArray;
    }
}




















